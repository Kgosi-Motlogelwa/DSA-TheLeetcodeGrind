Leetcode 46 - Permutation

function permute(nums: number[]): number[][] {
    let finalList = []

    const backtrack = (choice = [], remaining = nums) => {
        if(remaining.length === 0){
            finalList.push([...choice])
            return false
        }
        for(let i = 0; i < remaining.length; i++){
            choice.push(remaining[i])
            let remain = remaining.filter((val, index)=> index  !== i)
            backtrack(choice, remain)
            choice.pop()
        }
    }
    backtrack()
    return finalList
};

Leetcode 78 - Subset

function subsets(nums: number[]): number[][] {
    let finalList = [[]]
    nums.forEach(val => {
        finalList.push([val])
    })

    if(nums.length <= 1){
        return finalList
    }
    let map = new Map()

    const backtracking = (choice = [], remaining = nums) => {
        if(remaining.length === 0){
            return
        }

        for(let i = 0; i < remaining.length; i++){
            choice.push(remaining[i])
            let listTemp = []
            choice.forEach(val=>listTemp.push(val))
            if(listTemp.length > 1){
               finalList.push(listTemp) 
            }
            backtracking(choice, remaining.slice(i+1))
            choice.pop()
        }
    }
    backtracking()

    return finalList
};

Leetcode 90 - Subset II

function subsetsWithDup(nums: number[]): number[][] {
    nums.sort((a,b)=>a-b)
    let finalList = [[]]
    let map = new Map()
    nums.forEach(val=>{
        let tempStr = val.toString()
        if(!map.has(tempStr)){
            map.set(tempStr, 1)
            finalList.push([val])
        }
        
    })

    if(nums.length <= 1){
        return finalList
    }

    let mapChoiceSort = new Map()

    const backtracking = (choice = [], remain = nums) => {
        if(remain.length === 0){
            return
        }
        

        for(let i = 0; i < remain.length; i++){
            choice.push(remain[i])

            let choiceSort = []
            choice.forEach(val => {
                choiceSort.push(val)
            })
            
            choiceSort.sort((a,b)=>a-b)
            let choiceSortStr = choiceSort.join("")
            if(!mapChoiceSort.has(choiceSortStr)){
                mapChoiceSort.set(choiceSortStr, 1)
                let temp = []
                choice.forEach(val=>temp.push(val))
                let tempStr = temp.join("").toString()
                if(temp.length > 1 && !map.has(tempStr)){
                    map.set(tempStr, 1)
                    finalList.push(temp)
                }
            }
           
            backtracking(choice , remain.slice(i+1))
            choice.pop()
        }
        return
    }
    backtracking()
    return finalList
};

Leetcode 22 - Generate Paranthesis
https://imgur.com/Bu6sn8L

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        stack = []
        res = []
        
        def backtracking(openPar, closedPar):
            if openPar == closedPar == n:
                print("stack: ", "".join(stack))
                res.append("".join(stack))
                return
            
            if openPar < n:
                stack.append("(")
                backtracking(openPar+1, closedPar)
                stack.pop()
                
            if closedPar < openPar:
                stack.append(")")
                backtracking(openPar, closedPar+1)
                stack.pop()
        
        backtracking(0,0)
        return res
        
This problem was really challanging. I needed to find the graph of paranthesis before I started.
Backtracking doesn't have to follow the 

Leetcode 48 - Permutations
https://imgur.com/C8727Be

function permute(nums: number[]): number[][] {
    let finalList = []
    
    const backtracking = (choice, remain = nums) => {
        if(remain.length === 0){
            return
           }
    
        for(let i = 0; i < remain.length; i++){
            choice.push(remain[i])
            let newRemain = []
            
            if(choice.length === nums.length){
                let temp = []
                choice.forEach(val => {
                    temp.push(val)
                })
                finalList.push(temp)
            }
            let newChoice = (remain.slice(0, i)).concat(remain.slice(i+1))
            backtracking(choice, newChoice)
            choice.pop()
        }
    }
    backtracking([], nums)
    return finalList
};

I re-did the problem. It's kinda tricky. It took me maybe an hour. For backtracking start with:
- Draw a graph
  1. Start with an empty graph and populate it until your final answers are at the bottom. https://imgur.com/Bu6sn8L
  2. Then go back up and find the other paths
- Solve the problem using recursion always. Can weird like Generate Paranthesis
